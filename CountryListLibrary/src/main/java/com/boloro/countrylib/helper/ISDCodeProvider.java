package com.boloro.countrylib.helper;

import android.content.Context;
import android.text.TextUtils;

import com.boloro.countrylib.R;
import com.boloro.countrylib.model.Country;
import com.boloro.countrylib.model.NationalityData;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;

import java.io.IOException;
import java.io.InputStream;
import java.util.List;

/**
 * ISC Code and flag handler
 */
public class ISDCodeProvider {
    private static ISDCodeProvider isdCodeProvider;
    private List<Country> countriesCodeList;
    private List<NationalityData> nationalityDataList;
    private List<Country> countriesDataList;
    private String DEFAULT_ISD_CODE = "AE";

    /**
     * @param context class context
     */
    public synchronized static void initialize(Context context, String localeCode) {
        if (isdCodeProvider == null) {
            isdCodeProvider = new ISDCodeProvider();
        }
        isdCodeProvider.loadCountriesWithISDCode(context, R.raw.countries);
        if (!localeCode.isEmpty() && localeCode.equals("en_US")) {
            isdCodeProvider.loadCountriesData(context, R.raw.country_en);
            isdCodeProvider.loadNationalityData(context, R.raw.nationality_en);
        } else {
            isdCodeProvider.loadCountriesData(context, R.raw.country_ar);
            isdCodeProvider.loadNationalityData(context, R.raw.nationality_ar);
        }
    }

    /**
     * @return isd code
     */
    public static ISDCodeProvider getIsdCodeProvider() {
        return isdCodeProvider;
    }

    public void setDefaultISD(String isdCode) {
        DEFAULT_ISD_CODE = isdCode;
    }

    public List<Country> getCountriesCodeList() {
        return countriesCodeList;
    }

    private String loadJSONFromResource(Context context, int rawFile) {
        String json = null;
        try {
            InputStream is = context.getResources().openRawResource(rawFile);
            int size = is.available();
            byte[] buffer = new byte[size];
            is.read(buffer);
            is.close();
            json = new String(buffer);
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        return json;
    }

    /**
     * Returns image res based on country name code
     *
     * @param id id
     * @return flag
     */
    public String getFlagEmoji(String id) {
        switch (id.toLowerCase()) {
            //this should be sorted based on country name code.
            case "ad":
                return "ğŸ‡¦ğŸ‡©";
            case "ae":
                return "ğŸ‡¦ğŸ‡ª";
            case "af":
                return "ğŸ‡¦ğŸ‡«";
            case "ag":
                return "ğŸ‡¦ğŸ‡¬";
            case "ai":
                return "ğŸ‡¦ğŸ‡®";
            case "al":
                return "ğŸ‡¦ğŸ‡±";
            case "am":
                return "ğŸ‡¦ğŸ‡²";
            case "ao":
                return "ğŸ‡¦ğŸ‡´";
            case "aq":
                return "ğŸ‡¦ğŸ‡¶";
            case "ar":
                return "ğŸ‡¦ğŸ‡·";
            case "as":
                return "ğŸ‡¦ğŸ‡¸";
            case "at":
                return "ğŸ‡¦ğŸ‡¹";
            case "au":
                return "ğŸ‡¦ğŸ‡º";
            case "aw":
                return "ğŸ‡¦ğŸ‡¼";
            case "ax":
                return "ğŸ‡¦ğŸ‡½";
            case "az":
                return "ğŸ‡¦ğŸ‡¿";
            case "ba":
                return "ğŸ‡§ğŸ‡¦";
            case "bb":
                return "ğŸ‡§ğŸ‡§";
            case "bd":
                return "ğŸ‡§ğŸ‡©";
            case "be":
                return "ğŸ‡§ğŸ‡ª";
            case "bf":
                return "ğŸ‡§ğŸ‡«";
            case "bg":
                return "ğŸ‡§ğŸ‡¬";
            case "bh":
                return "ğŸ‡§ğŸ‡­";
            case "bi":
                return "ğŸ‡§ğŸ‡®";
            case "bj":
                return "ğŸ‡§ğŸ‡¯";
            case "bl":
                return "ğŸ‡§ğŸ‡±";
            case "bm":
                return "ğŸ‡§ğŸ‡²";
            case "bn":
                return "ğŸ‡§ğŸ‡³";
            case "bo":
                return "ğŸ‡§ğŸ‡´";
            case "bq":
                return "ğŸ‡§ğŸ‡¶";
            case "br":
                return "ğŸ‡§ğŸ‡·";
            case "bs":
                return "ğŸ‡§ğŸ‡¸";
            case "bt":
                return "ğŸ‡§ğŸ‡¹";
            case "bv":
                return "ğŸ‡§ğŸ‡»";
            case "bw":
                return "ğŸ‡§ğŸ‡¼";
            case "by":
                return "ğŸ‡§ğŸ‡¾";
            case "bz":
                return "ğŸ‡§ğŸ‡¿";
            case "ca":
                return "ğŸ‡¨ğŸ‡¦";
            case "cc":
                return "ğŸ‡¨ğŸ‡¨";
            case "cd":
                return "ğŸ‡¨ğŸ‡©";
            case "cf":
                return "ğŸ‡¨ğŸ‡«";
            case "cg":
                return "ğŸ‡¨ğŸ‡¬";
            case "ch":
                return "ğŸ‡¨ğŸ‡­";
            case "ci":
                return "ğŸ‡¨ğŸ‡®";
            case "ck":
                return "ğŸ‡¨ğŸ‡°";
            case "cl":
                return "ğŸ‡¨ğŸ‡±";
            case "cm":
                return "ğŸ‡¨ğŸ‡²";
            case "cn":
                return "ğŸ‡¨ğŸ‡³";
            case "co":
                return "ğŸ‡¨ğŸ‡´";
            case "cr":
                return "ğŸ‡¨ğŸ‡·";
            case "cu":
                return "ğŸ‡¨ğŸ‡º";
            case "cv":
                return "ğŸ‡¨ğŸ‡»";
            case "cw":
                return "ğŸ‡¨ğŸ‡¼";
            case "cx":
                return "ğŸ‡¨ğŸ‡½";
            case "cy":
                return "ğŸ‡¨ğŸ‡¾";
            case "cz":
                return "ğŸ‡¨ğŸ‡¿";
            case "de":
                return "ğŸ‡©ğŸ‡ª";
            case "dj":
                return "ğŸ‡©ğŸ‡¯";
            case "dk":
                return "ğŸ‡©ğŸ‡°";
            case "dm":
                return "ğŸ‡©ğŸ‡²";
            case "do":
                return "ğŸ‡©ğŸ‡´";
            case "dz":
                return "ğŸ‡©ğŸ‡¿";
            case "ec":
                return "ğŸ‡ªğŸ‡¨";
            case "ee":
                return "ğŸ‡ªğŸ‡ª";
            case "eg":
                return "ğŸ‡ªğŸ‡¬";
            case "eh":
                return "ğŸ‡ªğŸ‡­";
            case "er":
                return "ğŸ‡ªğŸ‡·";
            case "es":
                return "ğŸ‡ªğŸ‡¸";
            case "et":
                return "ğŸ‡ªğŸ‡¹";
            case "fi":
                return "ğŸ‡«ğŸ‡®";
            case "fj":
                return "ğŸ‡«ğŸ‡¯";
            case "fk":
                return "ğŸ‡«ğŸ‡°";
            case "fm":
                return "ğŸ‡«ğŸ‡²";
            case "fo":
                return "ğŸ‡«ğŸ‡´";
            case "fr":
                return "ğŸ‡«ğŸ‡·";
            case "ga":
                return "ğŸ‡¬ğŸ‡¦";
            case "gb":
                return "ğŸ‡¬ğŸ‡§";
            case "gd":
                return "ğŸ‡¬ğŸ‡©";
            case "ge":
                return "ğŸ‡¬ğŸ‡ª";
            case "gf":
                return "ğŸ‡¬ğŸ‡«";
            case "gg":
                return "ğŸ‡¬ğŸ‡¬";
            case "gh":
                return "ğŸ‡¬ğŸ‡­";
            case "gi":
                return "ğŸ‡¬ğŸ‡®";
            case "gl":
                return "ğŸ‡¬ğŸ‡±";
            case "gm":
                return "ğŸ‡¬ğŸ‡²";
            case "gn":
                return "ğŸ‡¬ğŸ‡³";
            case "gp":
                return "ğŸ‡¬ğŸ‡µ";
            case "gq":
                return "ğŸ‡¬ğŸ‡¶";
            case "gr":
                return "ğŸ‡¬ğŸ‡·";
            case "gs":
                return "ğŸ‡¬ğŸ‡¸";
            case "gt":
                return "ğŸ‡¬ğŸ‡¹";
            case "gu":
                return "ğŸ‡¬ğŸ‡º";
            case "gw":
                return "ğŸ‡¬ğŸ‡¼";
            case "gy":
                return "ğŸ‡¬ğŸ‡¾";
            case "hk":
                return "ğŸ‡­ğŸ‡°";
            case "hm":
                return "ğŸ‡­ğŸ‡²";
            case "hn":
                return "ğŸ‡­ğŸ‡³";
            case "hr":
                return "ğŸ‡­ğŸ‡·";
            case "ht":
                return "ğŸ‡­ğŸ‡¹";
            case "hu":
                return "ğŸ‡­ğŸ‡º";
            case "id":
                return "ğŸ‡®ğŸ‡©";
            case "ie":
                return "ğŸ‡®ğŸ‡ª";
            case "il":
                return "ğŸ‡®ğŸ‡±";
            case "im":
                return "ğŸ‡®ğŸ‡²";
            case "in":
                return "ğŸ‡®ğŸ‡³";
            case "io":
                return "ğŸ‡®ğŸ‡´";
            case "iq":
                return "ğŸ‡®ğŸ‡¶";
            case "ir":
                return "ğŸ‡®ğŸ‡·";
            case "is":
                return "ğŸ‡®ğŸ‡¸";
            case "it":
                return "ğŸ‡®ğŸ‡¹";
            case "je":
                return "ğŸ‡¯ğŸ‡ª";
            case "jm":
                return "ğŸ‡¯ğŸ‡²";
            case "jo":
                return "ğŸ‡¯ğŸ‡´";
            case "jp":
                return "ğŸ‡¯ğŸ‡µ";
            case "ke":
                return "ğŸ‡°ğŸ‡ª";
            case "kg":
                return "ğŸ‡°ğŸ‡¬";
            case "kh":
                return "ğŸ‡°ğŸ‡­";
            case "ki":
                return "ğŸ‡°ğŸ‡®";
            case "km":
                return "ğŸ‡°ğŸ‡²";
            case "kn":
                return "ğŸ‡°ğŸ‡³";
            case "kp":
                return "ğŸ‡°ğŸ‡µ";
            case "kr":
                return "ğŸ‡°ğŸ‡·";
            case "kw":
                return "ğŸ‡°ğŸ‡¼";
            case "ky":
                return "ğŸ‡°ğŸ‡¾";
            case "kz":
                return "ğŸ‡°ğŸ‡¿";
            case "la":
                return "ğŸ‡±ğŸ‡¦";
            case "lb":
                return "ğŸ‡±ğŸ‡§";
            case "lc":
                return "ğŸ‡±ğŸ‡¨";
            case "li":
                return "ğŸ‡±ğŸ‡®";
            case "lk":
                return "ğŸ‡±ğŸ‡°";
            case "lr":
                return "ğŸ‡±ğŸ‡·";
            case "ls":
                return "ğŸ‡±ğŸ‡¸";
            case "lt":
                return "ğŸ‡±ğŸ‡¹";
            case "lu":
                return "ğŸ‡±ğŸ‡º";
            case "lv":
                return "ğŸ‡±ğŸ‡»";
            case "ly":
                return "ğŸ‡±ğŸ‡¾";
            case "ma":
                return "ğŸ‡²ğŸ‡¦";
            case "mc":
                return "ğŸ‡²ğŸ‡¨";
            case "md":
                return "ğŸ‡²ğŸ‡©";
            case "me":
                return "ğŸ‡²ğŸ‡ª";
            case "mf":
                return "ğŸ‡²ğŸ‡«";
            case "mg":
                return "ğŸ‡²ğŸ‡¬";
            case "mh":
                return "ğŸ‡²ğŸ‡­";
            case "mk":
                return "ğŸ‡²ğŸ‡°";
            case "ml":
                return "ğŸ‡²ğŸ‡±";
            case "mm":
                return "ğŸ‡²ğŸ‡²";
            case "mn":
                return "ğŸ‡²ğŸ‡³";
            case "mo":
                return "ğŸ‡²ğŸ‡´";
            case "mp":
                return "ğŸ‡²ğŸ‡µ";
            case "mq":
                return "ğŸ‡²ğŸ‡¶";
            case "mr":
                return "ğŸ‡²ğŸ‡·";
            case "ms":
                return "ğŸ‡²ğŸ‡¸";
            case "mt":
                return "ğŸ‡²ğŸ‡¹";
            case "mu":
                return "ğŸ‡²ğŸ‡º";
            case "mv":
                return "ğŸ‡²ğŸ‡»";
            case "mw":
                return "ğŸ‡²ğŸ‡¼";
            case "mx":
                return "ğŸ‡²ğŸ‡½";
            case "my":
                return "ğŸ‡²ğŸ‡¾";
            case "mz":
                return "ğŸ‡²ğŸ‡¿";
            case "na":
                return "ğŸ‡³ğŸ‡¦";
            case "nc":
                return "ğŸ‡³ğŸ‡¨";
            case "ne":
                return "ğŸ‡³ğŸ‡ª";
            case "nf":
                return "ğŸ‡³ğŸ‡«";
            case "ng":
                return "ğŸ‡³ğŸ‡¬";
            case "ni":
                return "ğŸ‡³ğŸ‡®";
            case "nl":
                return "ğŸ‡³ğŸ‡±";
            case "no":
                return "ğŸ‡³ğŸ‡´";
            case "np":
                return "ğŸ‡³ğŸ‡µ";
            case "nr":
                return "ğŸ‡³ğŸ‡·";
            case "nu":
                return "ğŸ‡³ğŸ‡º";
            case "nz":
                return "ğŸ‡³ğŸ‡¿";
            case "om":
                return "ğŸ‡´ğŸ‡²";
            case "pa":
                return "ğŸ‡µğŸ‡¦";
            case "pe":
                return "ğŸ‡µğŸ‡ª";
            case "pf":
                return "ğŸ‡µğŸ‡«";
            case "pg":
                return "ğŸ‡µğŸ‡¬";
            case "ph":
                return "ğŸ‡µğŸ‡­";
            case "pk":
                return "ğŸ‡µğŸ‡°";
            case "pl":
                return "ğŸ‡µğŸ‡±";
            case "pm":
                return "ğŸ‡µğŸ‡²";
            case "pn":
                return "ğŸ‡µğŸ‡³";
            case "pr":
                return "ğŸ‡µğŸ‡·";
            case "ps":
                return "ğŸ‡µğŸ‡¸";
            case "pt":
                return "ğŸ‡µğŸ‡¹";
            case "pw":
                return "ğŸ‡µğŸ‡¼";
            case "py":
                return "ğŸ‡µğŸ‡¾";
            case "qa":
                return "ğŸ‡¶ğŸ‡¦";
            case "re":
                return "ğŸ‡·ğŸ‡ª";
            case "ro":
                return "ğŸ‡·ğŸ‡´";
            case "rs":
                return "ğŸ‡·ğŸ‡¸";
            case "ru":
                return "ğŸ‡·ğŸ‡º";
            case "rw":
                return "ğŸ‡·ğŸ‡¼";
            case "sa":
                return "ğŸ‡¸ğŸ‡¦";
            case "sb":
                return "ğŸ‡¸ğŸ‡§";
            case "sc":
                return "ğŸ‡¸ğŸ‡¨";
            case "sd":
                return "ğŸ‡¸ğŸ‡©";
            case "se":
                return "ğŸ‡¸ğŸ‡ª";
            case "sg":
                return "ğŸ‡¸ğŸ‡¬";
            case "sh":
                return "ğŸ‡¸ğŸ‡­";
            case "si":
                return "ğŸ‡¸ğŸ‡®";
            case "sj":
                return "ğŸ‡¸ğŸ‡¯";
            case "sk":
                return "ğŸ‡¸ğŸ‡°";
            case "sl":
                return "ğŸ‡¸ğŸ‡±";
            case "sm":
                return "ğŸ‡¸ğŸ‡²";
            case "sn":
                return "ğŸ‡¸ğŸ‡³";
            case "so":
                return "ğŸ‡¸ğŸ‡´";
            case "sr":
                return "ğŸ‡¸ğŸ‡·";
            case "ss":
                return "ğŸ‡¸ğŸ‡¸";
            case "st":
                return "ğŸ‡¸ğŸ‡¹";
            case "sv":
                return "ğŸ‡¸ğŸ‡»";
            case "sx":
                return "ğŸ‡¸ğŸ‡½";
            case "sy":
                return "ğŸ‡¸ğŸ‡¾";
            case "sz":
                return "ğŸ‡¸ğŸ‡¿";
            case "tc":
                return "ğŸ‡¹ğŸ‡¨";
            case "td":
                return "ğŸ‡¹ğŸ‡©";
            case "tf":
                return "ğŸ‡¹ğŸ‡«";
            case "tg":
                return "ğŸ‡¹ğŸ‡¬";
            case "th":
                return "ğŸ‡¹ğŸ‡­";
            case "tj":
                return "ğŸ‡¹ğŸ‡¯";
            case "tk":
                return "ğŸ‡¹ğŸ‡°";
            case "tl":
                return "ğŸ‡¹ğŸ‡±";
            case "tm":
                return "ğŸ‡¹ğŸ‡²";
            case "tn":
                return "ğŸ‡¹ğŸ‡³";
            case "to":
                return "ğŸ‡¹ğŸ‡´";
            case "tr":
                return "ğŸ‡¹ğŸ‡·";
            case "tt":
                return "ğŸ‡¹ğŸ‡¹";
            case "tv":
                return "ğŸ‡¹ğŸ‡»";
            case "tw":
                return "ğŸ‡¹ğŸ‡¼";
            case "tz":
                return "ğŸ‡¹ğŸ‡¿";
            case "ua":
                return "ğŸ‡ºğŸ‡¦";
            case "ug":
                return "ğŸ‡ºğŸ‡¬";
            case "um":
                return "ğŸ‡ºğŸ‡²";
            case "us":
                return "ğŸ‡ºğŸ‡¸";
            case "uy":
                return "ğŸ‡ºğŸ‡¾";
            case "uz":
                return "ğŸ‡ºğŸ‡¿";
            case "va":
                return "ğŸ‡»ğŸ‡¦";
            case "vc":
                return "ğŸ‡»ğŸ‡¨";
            case "ve":
                return "ğŸ‡»ğŸ‡ª";
            case "vg":
                return "ğŸ‡»ğŸ‡¬";
            case "vi":
                return "ğŸ‡»ğŸ‡®";
            case "vn":
                return "ğŸ‡»ğŸ‡³";
            case "vu":
                return "ğŸ‡»ğŸ‡º";
            case "wf":
                return "ğŸ‡¼ğŸ‡«";
            case "ws":
                return "ğŸ‡¼ğŸ‡¸";
            case "xk":
                return "ğŸ‡½ğŸ‡°";
            case "ye":
                return "ğŸ‡¾ğŸ‡ª";
            case "yt":
                return "ğŸ‡¾ğŸ‡¹";
            case "za":
                return "ğŸ‡¿ğŸ‡¦";
            case "zm":
                return "ğŸ‡¿ğŸ‡²";
            case "zw":
                return "ğŸ‡¿ğŸ‡¼";
            default:
                return "\uD83C\uDF0D";
        }
    }

    public Country getDefaultCountry() {
        return getCountryFromCountryCode(DEFAULT_ISD_CODE);
    }

    public Country getCountryFromCountryCode(String code) {
        if (TextUtils.isEmpty(code))
            return getDefaultCountry();

        if (!countriesCodeList.isEmpty()) {
            for (Country country : countriesCodeList) {
                if (country.getId().equalsIgnoreCase(code))
                    return country;
            }
        }
        return null;
    }

    public Country getCountryWithoutFlag(String isdCode) {
        Country country = new Country();
        country.setId("\uD83C\uDF0D");
        country.setIsdCode(isdCode);
        return country;
    }


    public Country getCountryFromIsdCode(String isdCode) {
        int count = 0;
        Country c = getCountryWithoutFlag(isdCode);

        for (Country country : countriesCodeList) {
            if (country.getIsdCode().equalsIgnoreCase(isdCode)) {
                c = country;
                if (++count > 1) {
                    c = getCountryWithoutFlag(isdCode);
                    break;
                }
            }
        }
        return c;
    }


    private void loadCountriesWithISDCode(Context context, int rawFile) {
        countriesCodeList = new Gson().fromJson(loadJSONFromResource(context, rawFile),
                new TypeToken<List<Country>>() {
                }.getType());
    }

    private void loadCountriesData(Context context, int rawFile) {
        countriesDataList = new Gson().fromJson(loadJSONFromResource(context, rawFile),
                new TypeToken<List<Country>>() {
                }.getType());
    }

    private void loadNationalityData(Context context, int rawFile) {
        nationalityDataList = new Gson().fromJson(loadJSONFromResource(context, rawFile),
                new TypeToken<List<NationalityData>>() {
                }.getType());
    }

    public List<NationalityData> getNationalityDataList() {
        return nationalityDataList;
    }

    public List<Country> getCountriesDataList() {
        return countriesDataList;
    }
}
